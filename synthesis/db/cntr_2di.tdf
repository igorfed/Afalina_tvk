--lpm_counter CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone III" lpm_modulus=6 lpm_port_updown="PORT_CONNECTIVITY" lpm_width=3 aclr clock q CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48
--VERSION_BEGIN 7.2 cbx_cycloneii 2007:06:13:15:47:32:SJ cbx_lpm_add_sub 2007:08:06:16:01:34:SJ cbx_lpm_compare 2007:06:21:15:54:06:SJ cbx_lpm_counter 2007:08:07:01:40:08:SJ cbx_lpm_decode 2007:03:12:19:01:52:SJ cbx_mgl 2007:08:03:15:48:12:SJ cbx_stratix 2007:05:02:16:27:14:SJ cbx_stratixii 2007:06:28:17:26:26:SJ  VERSION_END


-- Copyright (C) 1991-2007 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.



--synthesis_resources = lut 5 reg 3 
SUBDESIGN cntr_2di
( 
	aclr	:	input;
	clock	:	input;
	q[2..0]	:	output;
) 
VARIABLE 
	counter_reg_bit[2..0] : dffe;
	add_sub1_result_int[3..0]	:	WIRE;
	add_sub1_cout	:	WIRE;
	add_sub1_dataa[2..0]	:	WIRE;
	add_sub1_datab[2..0]	:	WIRE;
	add_sub1_result[2..0]	:	WIRE;
	cmpr2_aeb_int	:	WIRE;
	cmpr2_aeb	:	WIRE;
	cmpr2_dataa[2..0]	:	WIRE;
	cmpr2_datab[2..0]	:	WIRE;
	aclr_actual	: WIRE;
	add_sub_one_w[2..0]	: WIRE;
	add_value_w[2..0]	: WIRE;
	clk_en	: NODE;
	cnt_en	: NODE;
	compare_result	: WIRE;
	cout_actual	: WIRE;
	current_reg_q_w[2..0]	: WIRE;
	custom_cout_w	: WIRE;
	modulus_bus[2..0]	: WIRE;
	modulus_trigger	: WIRE;
	modulus_trigger_value_w[2..0]	: WIRE;
	safe_q[2..0]	: WIRE;
	time_to_clear	: WIRE;
	trigger_mux_w[2..0]	: WIRE;
	updown_dir	: WIRE;

BEGIN 
	counter_reg_bit[].clk = clock;
	counter_reg_bit[].clrn = (! aclr_actual);
	counter_reg_bit[].d = trigger_mux_w[];
	counter_reg_bit[].ena = (clk_en & cnt_en);
	add_sub1_result_int[] = (0, add_sub1_dataa[]) + (0, add_sub1_datab[]);
	add_sub1_result[] = add_sub1_result_int[2..0];
	add_sub1_cout = add_sub1_result_int[3];
	add_sub1_dataa[] = current_reg_q_w[];
	add_sub1_datab[] = add_value_w[];
	IF (cmpr2_dataa[] == cmpr2_datab[]) THEN
		cmpr2_aeb_int = VCC;
	ELSE
		cmpr2_aeb_int = GND;
	END IF;
	cmpr2_aeb = cmpr2_aeb_int;
	cmpr2_dataa[] = safe_q[];
	cmpr2_datab[] = modulus_bus[];
	aclr_actual = aclr;
	add_sub_one_w[] = add_sub1_result[];
	add_value_w[] = B"001";
	clk_en = VCC;
	cnt_en = VCC;
	compare_result = cmpr2_aeb;
	cout_actual = (custom_cout_w # (time_to_clear & updown_dir));
	current_reg_q_w[] = counter_reg_bit[].q;
	custom_cout_w = (add_sub1_cout & add_value_w[0..0]);
	modulus_bus[] = B"101";
	modulus_trigger = cout_actual;
	modulus_trigger_value_w[] = ((! updown_dir) & modulus_bus[]);
	q[] = safe_q[];
	safe_q[] = counter_reg_bit[].q;
	time_to_clear = compare_result;
	trigger_mux_w[] = (((! modulus_trigger) & add_sub_one_w[]) # (modulus_trigger & modulus_trigger_value_w[]));
	updown_dir = B"1";
END;
--VALID FILE
